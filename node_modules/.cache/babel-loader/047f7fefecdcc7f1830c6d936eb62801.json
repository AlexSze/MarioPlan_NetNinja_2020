{"ast":null,"code":"var _jsxFileName = \"/Users/alexsze/Desktop/React_NetNinja/5_MarioPlan/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //import * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './store/reducers/rootreducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig';\nimport firebase from 'firebase/app'; //for render on auth ready\n\nimport { useSelector } from \"react-redux\";\nimport { isLoaded } from \"react-redux-firebase\"; // const store = createStore(\n//   rootReducer, \n//   compose(\n//     applyMiddleware(thunk.withExtraArgument({getFirebase})), // redux bindings for firestore\n//   )\n//   // compose(\n//   //   applyMiddleware(thunk.withExtraArgument({getFirebase,getFirestore})),    \n//   //   reactReduxFirebase(fbConfig), // redux binding for firebase\n//   //   reduxFirestore(fbConfig), // redux bindings for firestore\n//   // )\n// );\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk.withExtraArgument({\n  getFirestore,\n  getFirebase\n})), reduxFirestore(firebase, fbConfig)));\nconst profileSpecificProps = {\n  userProfile: \"users\",\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false\n};\nconst rffProps = {\n  firebase,\n  config: fbConfig && profileSpecificProps,\n  //important!\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n\nfunction AuthIsLoaded({\n  children\n}) {\n  const auth = useSelector(state => state.firebase.auth);\n  if (!isLoaded(auth)) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Loading...\"));\n  return children;\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(ReactReduxFirebaseProvider, Object.assign({}, rffProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();","map":{"version":3,"sources":["/Users/alexsze/Desktop/React_NetNinja/5_MarioPlan/src/index.js"],"names":["React","ReactDOM","App","createStore","applyMiddleware","compose","rootReducer","Provider","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","reactReduxFirebase","getFirebase","fbConfig","firebase","useSelector","isLoaded","store","withExtraArgument","profileSpecificProps","userProfile","useFirestoreForProfile","enableRedirectHandling","resetBeforeLogin","rffProps","config","dispatch","AuthIsLoaded","children","auth","state","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB,C,CACA;;AACA,SAAQC,WAAR,EAAqBC,eAArB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,kBAArC,EAAyDC,WAAzD,QAA4E,sBAA5E;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CAEA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,sBAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAGhB,WAAW,CACvBG,WADuB,EAEvBD,OAAO,CACLD,eAAe,CAACI,KAAK,CAACY,iBAAN,CAAwB;AAAET,EAAAA,YAAF;AAAgBG,EAAAA;AAAhB,CAAxB,CAAD,CADV,EAELJ,cAAc,CAACM,QAAD,EAAWD,QAAX,CAFT,CAFgB,CAAzB;AAQA,MAAMM,oBAAoB,GAAG;AAC3BC,EAAAA,WAAW,EAAE,OADc;AAE3BC,EAAAA,sBAAsB,EAAE,IAFG;AAG3BC,EAAAA,sBAAsB,EAAE,KAHG;AAI3BC,EAAAA,gBAAgB,EAAE;AAJS,CAA7B;AAOA,MAAMC,QAAQ,GAAG;AACfV,EAAAA,QADe;AAEfW,EAAAA,MAAM,EAAEZ,QAAQ,IAAIM,oBAFL;AAE2B;AAC1CO,EAAAA,QAAQ,EAAET,KAAK,CAACS,QAHD;AAIfnB,EAAAA;AAJe,CAAjB;;AAOA,SAASoB,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AAClC,QAAMC,IAAI,GAAGd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAAChB,QAAN,CAAee,IAA3B,CAAxB;AACA,MAAI,CAACb,QAAQ,CAACa,IAAD,CAAb,EACE,oBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF;AAMF,SAAOD,QAAP;AACD;;AAED7B,QAAQ,CAACgC,MAAT,eACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEd,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,0BAAD,oBAAgCO,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,CADJ,EAMEQ,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from './store/reducers/rootreducer';\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\n\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from './config/fbConfig'\nimport firebase from 'firebase/app'\n\n//for render on auth ready\nimport { useSelector } from \"react-redux\";\nimport { isLoaded } from \"react-redux-firebase\";\n\n// const store = createStore(\n//   rootReducer, \n//   compose(\n//     applyMiddleware(thunk.withExtraArgument({getFirebase})), // redux bindings for firestore\n//   )\n//   // compose(\n//   //   applyMiddleware(thunk.withExtraArgument({getFirebase,getFirestore})),    \n//   //   reactReduxFirebase(fbConfig), // redux binding for firebase\n//   //   reduxFirestore(fbConfig), // redux bindings for firestore\n//   // )\n// );\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase })),\n    reduxFirestore(firebase, fbConfig)\n  )\n);\n\nconst profileSpecificProps = {\n  userProfile: \"users\",\n  useFirestoreForProfile: true,\n  enableRedirectHandling: false,\n  resetBeforeLogin: false,\n};\n\nconst rffProps = {\n  firebase, \n  config: fbConfig && profileSpecificProps, //important!\n  dispatch: store.dispatch,\n  createFirestoreInstance\n}\n\nfunction AuthIsLoaded({ children }) {\n  const auth = useSelector((state) => state.firebase.auth);\n  if (!isLoaded(auth))\n    return (\n      <div className=\"center\">\n        {\" \"}\n        <p>Loading...</p>\n      </div>\n    );\n  return children;\n}\n\nReactDOM.render(\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rffProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}